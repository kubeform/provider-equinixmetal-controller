/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Circuit struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CircuitSpec   `json:"spec,omitempty"`
	Status            CircuitStatus `json:"status,omitempty"`
}

type CircuitSpec struct {
	State *CircuitSpecResource `json:"state,omitempty" tf:"-"`

	Resource CircuitSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CircuitSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// UUID of Connection where the VC is scoped to
	ConnectionID *string `json:"connectionID" tf:"connection_id"`
	// Name of the Virtual Circuit resource
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Equinix Metal network-to-network VLAN ID
	NniVLAN *int64 `json:"nniVLAN" tf:"nni_vlan"`
	// Nni VLAN ID parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	// +optional
	NniVnid *int64 `json:"nniVnid,omitempty" tf:"nni_vnid"`
	// UUID of the Connection Port where the VC is scoped to
	PortID *string `json:"portID" tf:"port_id"`
	// UUID of the Project where the VC is scoped to
	ProjectID *string `json:"projectID" tf:"project_id"`
	// Status of the virtual circuit resource
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// UUID of the VLAN to associate
	VlanID *string `json:"vlanID" tf:"vlan_id"`
	// VNID VLAN parameter, see https://metal.equinix.com/developers/docs/networking/fabric/
	// +optional
	Vnid *int64 `json:"vnid,omitempty" tf:"vnid"`
}

type CircuitStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CircuitList is a list of Circuits
type CircuitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Circuit CRD objects
	Items []Circuit `json:"items,omitempty"`
}
