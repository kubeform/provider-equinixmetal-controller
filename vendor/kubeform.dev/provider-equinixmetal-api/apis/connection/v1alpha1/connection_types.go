/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Connection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionSpec   `json:"spec,omitempty"`
	Status            ConnectionStatus `json:"status,omitempty"`
}

type ConnectionSpecPorts struct {
	// ID of the connection port resource
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Port link status
	// +optional
	LinkStatus *string `json:"linkStatus,omitempty" tf:"link_status"`
	// Name of the connection port resource
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Role - primary or secondary
	// +optional
	Role *string `json:"role,omitempty" tf:"role"`
	// Port speed in bits per second
	// +optional
	Speed *int64 `json:"speed,omitempty" tf:"speed"`
	// Port status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// List of IDs of virtual circuits attached to this port
	// +optional
	VirtualCircuitIDS *map[string]string `json:"virtualCircuitIDS,omitempty" tf:"virtual_circuit_ids"`
}

type ConnectionSpecServiceTokens struct {
	// Expiration date of the service token
	// +optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at"`
	// ID of the service token
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Maximum allowed speed for the service token
	// +optional
	MaxAllowedSpeed *string `json:"maxAllowedSpeed,omitempty" tf:"max_allowed_speed"`
	// Role of the service token
	// +optional
	Role *string `json:"role,omitempty" tf:"role"`
	// State of the service token
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Type of the service token, a_side or z_side
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ConnectionSpec struct {
	State *ConnectionSpecResource `json:"state,omitempty" tf:"-"`

	Resource ConnectionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ConnectionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Description of the connection resource
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Facility where the connection will be created
	// +optional
	Facility *string `json:"facility,omitempty" tf:"facility"`
	// Metro where the connection will be created
	// +optional
	Metro *string `json:"metro,omitempty" tf:"metro"`
	// Mode for connections in IBX facilities with the dedicated type - standard or tunnel
	// +optional
	Mode *string `json:"mode,omitempty" tf:"mode"`
	// Name of the connection resource
	Name *string `json:"name" tf:"name"`
	// ID of the organization responsible for the connection
	// +optional
	// Deprecated
	OrganizationID *string `json:"organizationID,omitempty" tf:"organization_id"`
	// List of connection ports - primary (`ports[0]`) and secondary (`ports[1]`)
	// +optional
	Ports []ConnectionSpecPorts `json:"ports,omitempty" tf:"ports"`
	// ID of the project where the connection is scoped to, only used for type == "shared"
	ProjectID *string `json:"projectID" tf:"project_id"`
	// Connection redundancy - redundant or primary
	Redundancy *string `json:"redundancy" tf:"redundancy"`
	// Only used with shared connection. Type of service token to use for the connection, a_side or z_side.
	// +optional
	ServiceTokenType *string `json:"serviceTokenType,omitempty" tf:"service_token_type"`
	// Only used with shared connection. List of service tokens to use for the connection.
	// +optional
	ServiceTokens []ConnectionSpecServiceTokens `json:"serviceTokens,omitempty" tf:"service_tokens"`
	// Port speed. Allowed values are 50Mbps, 200Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, 10Gbps
	Speed *string `json:"speed" tf:"speed"`
	// Status of the connection resource
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// Tags attached to the connection
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Fabric Token from the [Equinix Fabric Portal](https://ecxfabric.equinix.com/dashboard)
	// +optional
	// Deprecated
	Token *string `json:"token,omitempty" tf:"token"`
	// Connection type - dedicated or shared
	Type *string `json:"type" tf:"type"`
	// Only used with shared connection. Vlans to attach. Pass one vlan for Primary/Single connection and two vlans for Redundant connection.
	// +optional
	// +kubebuilder:validation:MaxItems=2
	Vlans []int64 `json:"vlans,omitempty" tf:"vlans"`
}

type ConnectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConnectionList is a list of Connections
type ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Connection CRD objects
	Items []Connection `json:"items,omitempty"`
}
