/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Device struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceSpec   `json:"spec,omitempty"`
	Status            DeviceStatus `json:"status,omitempty"`
}

type DeviceSpecIpAddress struct {
	// CIDR suffix for IP block assigned to this device
	// +optional
	Cidr *int64 `json:"cidr,omitempty" tf:"cidr"`
	// IDs of reservations to pick the blocks from
	// +optional
	// +kubebuilder:validation:MinItems=1
	ReservationIDS []string `json:"reservationIDS,omitempty" tf:"reservation_ids"`
	// one of public_ipv4,private_ipv4,public_ipv6
	Type *string `json:"type" tf:"type"`
}

type DeviceSpecNetwork struct {
	// IPv4 or IPv6 address string
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// CIDR suffix for IP address block to be assigned, i.e. amount of addresses
	// +optional
	Cidr *int64 `json:"cidr,omitempty" tf:"cidr"`
	// IP version - "4" or "6"
	// +optional
	Family *int64 `json:"family,omitempty" tf:"family"`
	// Address of router
	// +optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway"`
	// Whether the address is routable from the Internet
	// +optional
	Public *bool `json:"public,omitempty" tf:"public"`
}

type DeviceSpecPorts struct {
	// Whether this port is part of a bond in bonded network setup
	// +optional
	Bonded *bool `json:"bonded,omitempty" tf:"bonded"`
	// The ID of the device
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// MAC address assigned to the port
	// +optional
	Mac *string `json:"mac,omitempty" tf:"mac"`
	// Name of the port (e.g. eth0, or bond0)
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// One of [private_ipv4, public_ipv4, public_ipv6]
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type DeviceSpecReinstall struct {
	// Whether the OS disk should be filled with `00h` bytes before reinstall
	// +optional
	DeprovisionFast *bool `json:"deprovisionFast,omitempty" tf:"deprovision_fast"`
	// Whether the device should be reinstalled instead of destroyed
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// Whether the non-OS disks should be kept or wiped during reinstall
	// +optional
	PreserveData *bool `json:"preserveData,omitempty" tf:"preserve_data"`
}

type DeviceSpec struct {
	State *DeviceSpecResource `json:"state,omitempty" tf:"-"`

	Resource DeviceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DeviceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The ipv4 private IP assigned to the device
	// +optional
	AccessPrivateIpv4 *string `json:"accessPrivateIpv4,omitempty" tf:"access_private_ipv4"`
	// The ipv4 maintenance IP assigned to the device
	// +optional
	AccessPublicIpv4 *string `json:"accessPublicIpv4,omitempty" tf:"access_public_ipv4"`
	// The ipv6 maintenance IP assigned to the device
	// +optional
	AccessPublicIpv6 *string `json:"accessPublicIpv6,omitempty" tf:"access_public_ipv6"`
	// If true, a device with OS custom_ipxe will
	// +optional
	AlwaysPxe *bool `json:"alwaysPxe,omitempty" tf:"always_pxe"`
	// monthly or hourly
	BillingCycle *string `json:"billingCycle" tf:"billing_cycle"`
	// The timestamp for when the device was created
	// +optional
	Created *string `json:"created,omitempty" tf:"created"`
	// A string of the desired Custom Data for the device
	// +optional
	CustomData *string `json:"-" sensitive:"true" tf:"custom_data"`
	// The facility where the device is deployed
	// +optional
	DeployedFacility *string `json:"deployedFacility,omitempty" tf:"deployed_facility"`
	// ID of hardware reservation where this device was deployed. It is useful when using the next-available hardware reservation
	// +optional
	DeployedHardwareReservationID *string `json:"deployedHardwareReservationID,omitempty" tf:"deployed_hardware_reservation_id"`
	// Description string for the device
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	// +optional
	// +kubebuilder:validation:MinItems=1
	Facilities []string `json:"facilities,omitempty" tf:"facilities"`
	// Delete device even if it has volumes attached. Only applies for destroy action
	// +optional
	ForceDetachVolumes *bool `json:"forceDetachVolumes,omitempty" tf:"force_detach_volumes"`
	// The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your next available reservation automatically
	// +optional
	HardwareReservationID *string `json:"hardwareReservationID,omitempty" tf:"hardware_reservation_id"`
	// The device name
	Hostname *string `json:"hostname" tf:"hostname"`
	// A list of IP address types for the device (structure is documented below)
	// +optional
	// +kubebuilder:validation:MinItems=1
	IpAddress []DeviceSpecIpAddress `json:"ipAddress,omitempty" tf:"ip_address"`
	// URL pointing to a hosted iPXE script. More
	// +optional
	IpxeScriptURL *string `json:"ipxeScriptURL,omitempty" tf:"ipxe_script_url"`
	// Whether the device is locked
	// +optional
	Locked *bool `json:"locked,omitempty" tf:"locked"`
	// Metro area for the new device. Conflicts with facilities
	// +optional
	Metro *string `json:"metro,omitempty" tf:"metro"`
	// The device's private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 addresses: public ipv4, private ipv4 and ipv6
	// +optional
	Network []DeviceSpecNetwork `json:"network,omitempty" tf:"network"`
	// Network type of a device, used in [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Will be one of layer3, hybrid, hybrid-bonded, layer2-individual, layer2-bonded
	// +optional
	// Deprecated
	NetworkType *string `json:"networkType,omitempty" tf:"network_type"`
	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your API auth token in the top of the page and see JSON from the API response
	OperatingSystem *string `json:"operatingSystem" tf:"operating_system"`
	// The device plan slug. To find the plan slug, visit [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the top of the page and see JSON from the API response
	Plan *string `json:"plan" tf:"plan"`
	// Ports assigned to the device
	// +optional
	Ports []DeviceSpecPorts `json:"ports,omitempty" tf:"ports"`
	// The ID of the project in which to create the device
	ProjectID *string `json:"projectID" tf:"project_id"`
	// Array of IDs of the project SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed project SSH keys will be added. Project SSH keys can be created with the [metal_project_ssh_key](project_ssh_key.md) resource
	// +optional
	ProjectSSHKeyIDS []string `json:"projectSSHKeyIDS,omitempty" tf:"project_ssh_key_ids"`
	// +optional
	Reinstall *DeviceSpecReinstall `json:"reinstall,omitempty" tf:"reinstall"`
	// Root password to the server (disabled after 24 hours)
	// +optional
	RootPassword *string `json:"-" sensitive:"true" tf:"root_password"`
	// List of IDs of SSH keys deployed in the device, can be both user and project SSH keys
	// +optional
	SshKeyIDS []string `json:"sshKeyIDS,omitempty" tf:"ssh_key_ids"`
	// The status of the device
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/) doc
	// +optional
	Storage *string `json:"storage,omitempty" tf:"storage"`
	// Tags attached to the device
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The timestamp for the last time the device was updated
	// +optional
	Updated *string `json:"updated,omitempty" tf:"updated"`
	// A string of the desired User Data for the device
	// +optional
	UserData *string `json:"-" sensitive:"true" tf:"user_data"`
	// Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	// +optional
	WaitForReservationDeprovision *bool `json:"waitForReservationDeprovision,omitempty" tf:"wait_for_reservation_deprovision"`
}

type DeviceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DeviceList is a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Device CRD objects
	Items []Device `json:"items,omitempty"`
}
