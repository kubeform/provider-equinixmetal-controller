/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProjectSSHKey struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectSSHKeySpec   `json:"spec,omitempty"`
	Status            ProjectSSHKeyStatus `json:"status,omitempty"`
}

type ProjectSSHKeySpec struct {
	State *ProjectSSHKeySpecResource `json:"state,omitempty" tf:"-"`

	Resource ProjectSSHKeySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ProjectSSHKeySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The timestamp for when the SSH key was created
	// +optional
	Created *string `json:"created,omitempty" tf:"created"`
	// The fingerprint of the SSH key
	// +optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint"`
	// The name of the SSH key for identification
	Name *string `json:"name" tf:"name"`
	// The UUID of the Equinix Metal API User who owns this key
	// +optional
	OwnerID *string `json:"ownerID,omitempty" tf:"owner_id"`
	// The ID of parent project
	ProjectID *string `json:"projectID" tf:"project_id"`
	// The public key. If this is a file, it
	PublicKey *string `json:"publicKey" tf:"public_key"`
	// The timestamp for the last time the SSH key was updated
	// +optional
	Updated *string `json:"updated,omitempty" tf:"updated"`
}

type ProjectSSHKeyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectSSHKeyList is a list of ProjectSSHKeys
type ProjectSSHKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProjectSSHKey CRD objects
	Items []ProjectSSHKey `json:"items,omitempty"`
}
